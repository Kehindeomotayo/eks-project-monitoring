name: Terraform CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths: ['eks-terraform/**']
  pull_request:
    branches: [main]
    paths: ['eks-terraform/**']

env:
  TF_VERSION: '1.3.0'
  AWS_REGION: 'us-east-1'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'eks-terraform/'
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          TRIVY_TF_VARS: 'eks-terraform/dev.tfvars'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: eks-terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: eks-terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: eks-terraform
        run: terraform validate

      - name: Terraform Format Check
        working-directory: eks-terraform
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: eks-terraform
        run: |
          terraform plan -var-file="dev.tfvars" -out=tfplan
          terraform show -json tfplan > plan.json

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: eks-terraform/plan.json

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: eks-terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: eks-terraform
        run: terraform plan -var-file="dev.tfvars"

      - name: Terraform Apply
        working-directory: eks-terraform
        run: terraform apply -var-file="dev.tfvars" -auto-approve

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name my-dev-eks-cluster

      - name: Verify Deployment
        run: |
          kubectl get nodes
          kubectl get pods -A

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: eks-terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: eks-terraform
        run: terraform destroy -var-file="dev.tfvars" -auto-approve